import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { playSuccessSound, playBuzzerSound } from '../utils/soundUtils';

// ‚úÖ FIXED: Dynamic API URL detection
const getApiBaseUrl = () => {
  const hostname = window.location.hostname;
  const protocol = window.location.protocol;

  if (hostname !== 'localhost' && hostname !== '127.0.0.1') {
    return `${protocol}//${hostname}:3001`;
  }
  return 'http://localhost:3001';
};

export default function NonMemberForm() {
  const navigate = useNavigate();
  const location = useLocation();
  const { form: memberForm, memberCheckFailed } = location.state || {};

  const [form, setForm] = useState({
    nom: memberForm?.nom || '',
    prenom: memberForm?.prenom || '',
    email: '',
    telephone: '',
    dateNaissance: '',
    assuranceAccepted: false
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!form.nom.trim() || !form.prenom.trim()) {
      setError('Nom et pr√©nom sont requis');
      playBuzzerSound();
      return;
    }

    if (!form.assuranceAccepted) {
      setError('Veuillez accepter les conditions d\'assurance');
      playBuzzerSound();
      return;
    }

    setLoading(true);
    setError('');

    try {
      const API_BASE_URL = getApiBaseUrl(); // ‚úÖ FIXED: Dynamic API URL
      console.log('üåê NonMemberForm using API URL:', API_BASE_URL);

      const nonMemberData = {
        ...form,
        type: 'non-adherent',
        dateCreated: new Date().toISOString()
      };

      const response = await fetch(`${API_BASE_URL}/non-members`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(nonMemberData),
      });

      const result = await response.json();

      if (result.success) {
        playSuccessSound();
        navigate('/success', {
          state: {
            type: 'non-adherent',
            nom: form.nom,
            prenom: form.prenom,
            message: 'Inscription visiteur enregistr√©e avec succ√®s'
          }
        });
      } else {
        setError(result.error || 'Erreur lors de l\'enregistrement');
        playBuzzerSound();
      }
    } catch (err) {
      console.error('Non-member registration error:', err);
      setError(`Erreur de connexion. API: ${getApiBaseUrl()}`);
      playBuzzerSound();
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="non-member-form">
      {/* DEBUG INFO */}
      <div style={{padding: '10px', background: '#fff3cd', marginBottom: '15px', borderRadius: '5px', fontSize: '12px'}}>
        <div><strong>üîß NonMemberForm DEBUG:</strong></div>
        <div>üåê API URL: <strong>{getApiBaseUrl()}</strong></div>
        <div>üì± Host: <strong>{window.location.hostname}</strong></div>
      </div>

      <h2>Inscription Visiteur</h2>

      {memberCheckFailed && (
        <div className="info-message">
          Aucune adh√©sion trouv√©e. Veuillez vous inscrire comme visiteur.
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Nom de famille *:</label>
          <input
            type="text"
            value={form.nom}
            onChange={(e) => setForm({...form, nom: e.target.value})}
            disabled={loading}
            required
          />
        </div>

        <div className="form-group">
          <label>Pr√©nom *:</label>
          <input
            type="text"
            value={form.prenom}
            onChange={(e) => setForm({...form, prenom: e.target.value})}
            disabled={loading}
            required
          />
        </div>

        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={form.email}
            onChange={(e) => setForm({...form, email: e.target.value})}
            disabled={loading}
          />
        </div>

        <div className="form-group">
          <label>T√©l√©phone:</label>
          <input
            type="tel"
            value={form.telephone}
            onChange={(e) => setForm({...form, telephone: e.target.value})}
            disabled={loading}
          />
        </div>

        <div className="form-group">
          <label>Date de naissance:</label>
          <input
            type="date"
            value={form.dateNaissance}
            onChange={(e) => setForm({...form, dateNaissance: e.target.value})}
            disabled={loading}
          />
        </div>

        <div className="form-group">
          <label className="checkbox-label">
            <input
              type="checkbox"
              checked={form.assuranceAccepted}
              onChange={(e) => setForm({...form, assuranceAccepted: e.target.checked})}
              disabled={loading}
            />
            J'accepte les conditions d'assurance *
          </label>
        </div>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        <button 
          type="submit" 
          disabled={loading || !form.nom.trim() || !form.prenom.trim() || !form.assuranceAccepted}
        >
          {loading ? 'Enregistrement...' : 'S\'inscrire comme visiteur'}
        </button>
      </form>
    </div>
  );
}